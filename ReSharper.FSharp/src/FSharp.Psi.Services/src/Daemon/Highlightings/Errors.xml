<Errors language="F#" implementationLanguage="F#">

  <Usings>
    JetBrains.ReSharper.Intentions.QuickFixes;
    JetBrains.ReSharper.Plugins.FSharp.Psi;
    JetBrains.ReSharper.Plugins.FSharp.Psi.Features.Daemon.Highlightings;
    JetBrains.ReSharper.Plugins.FSharp.Psi.Impl.Tree;
    JetBrains.ReSharper.Plugins.FSharp.Psi.Resolve;
    JetBrains.ReSharper.Plugins.FSharp.Psi.Impl;
    JetBrains.ReSharper.Plugins.FSharp.Psi.Tree
  </Usings>

  <SeverityConfiguration>
    <Group name="HighlightingGroupIds.CodeRedundancy">
      <Tag name="FSharpRedundantParens" default="WARNING">
        <Title>Remove redundant parentheses</Title>
        <Description>Parentheses can be safely removed without changing code semantics.</Description>
      </Tag>
      <Tag name="FSharpRedundantOpen" default="WARNING">
        <Title>Redundant 'open' directive</Title>
        <Description>Open directive is not required by the code and can be safely removed.</Description>
      </Tag>
      <Tag name="FSharpRedundantBackticks" default="WARNING">
        <Title>Redundant identifier escaping</Title>
        <Description>Redundant use of `` escaping sequences.</Description>
      </Tag>
      <Tag name="FSharpRedundantNameQualifier" default="WARNING">
        <Title>Redundant name qualifier</Title>
        <Description>Redundant use of qualifier for name.</Description>
      </Tag>
      <Tag name="FSharpRedundantNew" default="WARNING">
        <Title>Redundant 'new' keyword</Title>
        <Description>'new' keyword is not required and can be safely removed.</Description>
      </Tag>
      <Tag name="FSharpRedundantAttributeParens" default="WARNING">
        <Title>Redundant attribute parentheses argument</Title>
        <Description>Parentheses are redundant if attribute has no arguments.</Description>
      </Tag>
      <Tag name="FSharpRedundantAttributeSuffix" default="WARNING">
        <Title>Redundant 'Attribute' suffix</Title>
        <Description>Redundant 'Attribute' suffix.</Description>
      </Tag>
      <Tag name="FSharpRedundantUnionCaseFieldPatterns" default="WARNING">
        <Title>Redundant union case fields matching</Title>
        <Description>Explicit fields matching is redundant and can be replaced with '_'.</Description>
      </Tag>
      <Tag name="FSharpConsWithEmptyListPat" default="SUGGESTION">
        <Title>Redundant concatenation with empty list</Title>
        <Description>Redundant concatenation with empty list.</Description>
      </Tag>
      <Tag name="FSharpRedundantApplication" default="WARNING">
        <Title>Redundant application</Title>
        <Description>Application is redundant and can be replaced with its argument.</Description>
      </Tag>
      <Tag name="FSharpRedundantRequireQualifiedAccessAttribute" default="WARNING">
        <Title>Redundant RequireQualifiedAccess attribute</Title>
        <Description>Enum type always requires qualified access.</Description>
      </Tag>
      <Tag name="FSharpLambdaCanBeSimplified" default="HINT">
        <Title>Lambda expression can be simplified</Title>
        <Description>Lambda expression can be simplified.</Description>
      </Tag>
      <Tag name="FSharpLambdaCanBeReplacedWithInnerExpression" default="HINT">
        <Title>Lambda expression can be replaced with inner expression</Title>
        <Description>Lambda expression can be replaced with inner expression.</Description>
      </Tag>
      <Tag name="FSharpBuiltinFunctionReimplementation" default="HINT">
        <Title>Lambda expression can be replaced with built-in function</Title>
        <Description>Lambda expression can be replaced with built-in function.</Description>
      </Tag>
      <Tag name="FSharpUseWildSelfId" default="SUGGESTION">
        <Title>Use `_` self id</Title>
        <Description>Use `_` self id.</Description>
      </Tag>
      <Tag name="FSharpRedundantStringInterpolation" default="SUGGESTION">
        <Title>Redundant string interpolation</Title>
        <Description>String interpolation expression without arguments is redundant.</Description>
      </Tag>
      <Tag name="FSharpInterpolatedString" default="SUGGESTION">
        <Title>Format string can be replaced with an interpolated string</Title>
        <Description>Format string can be replaced with an interpolated string.</Description>
      </Tag>
      <Tag name="FSharpExpressionCanBeReplacedWithCondition" default="HINT">
        <Title>'if' expression can be replaced with its condition</Title>
        <Description>'if' expression can be replaced with its condition.</Description>
      </Tag>
      <Tag name="FSharpRedundantAsPattern" default="WARNING">
        <Title>Redundant 'as' pattern</Title>
        <Description>'as' pattern can be replaced with its name.</Description>
      </Tag>
      <Tag name="FSharpRedundantDotInIndexer" default="WARNING">
        <Title>Redundant '.' in indexer</Title>
        <Description>'.' can be removed in indexers.</Description>
      </Tag>

    </Group>
  </SeverityConfiguration>

  <StaticSeverityGroups>
    <Group name="F# Errors" key="FSharpErrors"/>
  </StaticSeverityGroups>

  <Warning name="UnusedOpen" configurableSeverity="FSharpRedundantOpen">
    <Parameter type="IOpenStatement" name="openStatement"/>
    <Message value="Open directive is not required by the code and can be safely removed"/>
    <Range>openStatement.GetHighlightingRange()</Range>
    <Behavour attributeID="DEADCODE"/>
    <QuickFix>RemoveUnusedOpensFix</QuickFix>
  </Warning>

  <Warning staticGroup="FSharpErrors" name="ExtensionMemberInNonExtensionType">
    <Parameter type="IAttribute" name="attr"/>
    <Range>attr.GetHighlightingRange()</Range>
    <Behavour overlapResolvePolicy="NONE"/>
    <Message value="Extension member in non-extension type looks suspicious"/>
    <QuickFix>AddExtensionAttributeFix</QuickFix>
  </Warning>

  <Warning staticGroup="FSharpErrors" name="ExtensionTypeWithNoExtensionMembers">
    <Parameter type="IAttribute" name="attr"/>
    <Range>attr.GetHighlightingRange()</Range>
    <Behavour attributeID="DEADCODE" overlapResolvePolicy="NONE"/>
    <Message value="Extension type doesn't have any extension members"/>
  </Warning>

  <Warning staticGroup="FSharpErrors" name="ExtensionMemberShouldBeStatic">
    <Parameter type="IAttribute" name="attr"/>
    <Range>attr.GetHighlightingRange()</Range>
    <Behavour overlapResolvePolicy="NONE"/>
    <Message value="Extension member should be static"/>
  </Warning>

  <Warning name="RedundantRequireQualifiedAccessAttribute" configurableSeverity="FSharpRedundantRequireQualifiedAccessAttribute">
    <Parameter type="IAttribute" name="attr"/>
    <Range>attr.GetHighlightingRange()</Range>
    <Behavour attributeID="DEADCODE" overlapResolvePolicy="DEADCODE"/>
    <Message value="Redundant RequireQualifiedAccess attribute"/>
    <QuickFix>RemoveRedundantAttributeFix</QuickFix>
  </Warning>

  <Warning name="RedundantBackticks" configurableSeverity="FSharpRedundantBackticks">
    <Parameter type="FSharpIdentifierToken" name="identifier"/>
    <Behavour attributeID="DEADCODE" overlapResolvePolicy="DEADCODE"/>
    <Message value="Redundant identifier escaping"/>
    <Range>identifier.GetHighlightingRange().StartOffsetRange().ExtendRight(2)</Range>
    <SecondaryRanges>[| identifier.GetHighlightingRange().EndOffsetRange().ExtendLeft(2) |] :> _</SecondaryRanges>
    <QuickFix>RemoveRedundantBackticksFix</QuickFix>
  </Warning>

  <Warning name="RedundantNew" configurableSeverity="FSharpRedundantNew">
    <Parameter type="INewExpr" name="newExpr"/>
    <Range>newExpr.NewKeyword.GetHighlightingRange()</Range>
    <Behavour attributeID="DEADCODE" overlapResolvePolicy="DEADCODE"/>
    <Message value="'new' keyword is redundant"/>
    <QuickFix>RemoveRedundantNewFix</QuickFix>
  </Warning>

  <Warning staticGroup="FSharpErrors" name="ConvertToUseBinding">
    <Parameter type="ILetOrUseExpr" name="letExpr"/>
    <Range>letExpr.BindingKeyword.GetHighlightingRange()</Range>
    <Behavour overlapResolvePolicy="NONE"/>
    <Message value="Convert to 'use' binding"/>
    <QuickFix>ConvertToUseFix</QuickFix>
  </Warning>

  <Warning staticGroup="FSharpErrors" name="RedundantParenExpr" configurableSeverity="FSharpRedundantParens" isSuppressedInTests="true">
    <Parameter type="IParenExpr" name="parenExpr"/>
    <Behavour attributeID="DEADCODE" overlapResolvePolicy="DEADCODE"/>
    <Message value="Redundant parentheses"/>
    <Range>parenExpr.LeftParen.GetHighlightingRange()</Range>
    <SecondaryRanges>secondaryRangesFromNode parenExpr.RightParen</SecondaryRanges>
    <QuickFix>RemoveRedundantParenExprFix</QuickFix>
  </Warning>

  <Warning staticGroup="FSharpErrors" name="RedundantParenPat" configurableSeverity="FSharpRedundantParens">
    <Parameter type="IParenPat" name="parenPat"/>
    <Behavour attributeID="DEADCODE" overlapResolvePolicy="DEADCODE"/>
    <Message value="Redundant parentheses"/>
    <Range>parenPat.LeftParen.GetHighlightingRange()</Range>
    <SecondaryRanges>secondaryRangesFromNode parenPat.RightParen</SecondaryRanges>
    <QuickFix>RemoveRedundantParenPatFix</QuickFix>
  </Warning>

  <Warning staticGroup="FSharpErrors" name="RedundantParenTypeUsage" configurableSeverity="FSharpRedundantParens">
    <Parameter type="IParenTypeUsage" name="parenTypeUsage"/>
    <Behavour attributeID="DEADCODE" overlapResolvePolicy="DEADCODE"/>
    <Message value="Redundant parentheses"/>
    <Range>parenTypeUsage.LeftParen.GetHighlightingRange()</Range>
    <SecondaryRanges>secondaryRangesFromNode parenTypeUsage.RightParen</SecondaryRanges>
    <QuickFix>RemoveRedundantParenTypeUsageFix</QuickFix>
  </Warning>

  <Warning name="RedundantAttributeParens" configurableSeverity="FSharpRedundantAttributeParens">
    <Parameter type="IAttribute" name="attribute"/>
    <Range>attribute.ArgExpression.GetHighlightingRange()</Range>
    <Behavour attributeID="DEADCODE" overlapResolvePolicy="DEADCODE"/>
    <Message value="Parentheses are redundant if attribute has no arguments"/>
    <QuickFix>RemoveRedundantAttributeParensFix</QuickFix>
  </Warning>

  <Warning name="RedundantAttributeSuffix" configurableSeverity="FSharpRedundantAttributeSuffix">
    <Parameter type="IAttribute" name="attribute"/>
    <Range>getAttributeSuffixRange attribute</Range>
    <Behavour attributeID="DEADCODE" overlapResolvePolicy="DEADCODE"/>
    <Message value="Attribute suffix is redundant"/>
    <QuickFix>RemoveRedundantAttributeSuffixFix</QuickFix>
  </Warning>

  <Warning name="RedundantQualifier" configurableSeverity="FSharpRedundantNameQualifier">
    <Parameter type="ITreeNode" name="treeNode"/>
    <Range>getQualifierRange treeNode</Range>
    <Behavour attributeID="DEADCODE" overlapResolvePolicy="DEADCODE"/>
    <Message value="Qualifier is redundant"/>
    <QuickFix>RemoveRedundantQualifierFix</QuickFix>
  </Warning>

  <Warning name="RedundantUnionCaseFieldPatterns" configurableSeverity="FSharpRedundantUnionCaseFieldPatterns">
    <Parameter type="IParenPat" name="parenPat"/>
    <Range>parenPat.GetHighlightingRange()</Range>
    <Message value="Redundant union case fields matching"/>
    <QuickFix>ReplaceWithWildPatScopedFix</QuickFix>
  </Warning>

  <Warning name="ConsWithEmptyListPat" configurableSeverity="FSharpConsWithEmptyListPat">
    <Parameter type="IListConsPat" name="listConsPat"/>
    <Range>listConsPat.GetHighlightingRange()</Range>
    <Message value="Pattern can be simplified"/>
    <QuickFix>SimplifyListConsPatFix</QuickFix>
  </Warning>

  <Warning name="RedundantApplication" configurableSeverity="FSharpRedundantApplication">
    <Parameter type="IAppExpr" name="appExpr"/>
    <Parameter type="IFSharpExpression" name="argExpr"/>
    <Range>getFunctionApplicationRange appExpr</Range>
    <Behavour attributeID="DEADCODE" overlapResolvePolicy="DEADCODE"/>
    <Message value="Redundant application"/>
    <QuickFix>ReplaceAppExprWithArgFix</QuickFix>
  </Warning>

  <Warning name="LambdaCanBeSimplified" configurableSeverity="FSharpLambdaCanBeSimplified">
    <Parameter type="ILambdaExpr" name="lambdaExpr"/>
    <Parameter type="IFSharpExpression" name="replaceCandidate"/>
    <Range>lambdaExpr.GetHighlightingRange()</Range>
    <Message value="Lambda can be simplified"/>
    <QuickFix>SimplifyLambdaFix</QuickFix>
  </Warning>

  <Warning name="LambdaCanBeReplacedWithInnerExpression" configurableSeverity="FSharpLambdaCanBeReplacedWithInnerExpression">
    <Parameter type="ILambdaExpr" name="lambdaExpr"/>
    <Parameter type="IFSharpExpression" name="replaceCandidate"/>
    <Range>lambdaExpr.GetHighlightingRange()</Range>
    <Message value="{0}">
      <Argument>getLambdaCanBeReplacedWarningText replaceCandidate</Argument>
    </Message>
    <QuickFix>ReplaceLambdaWithInnerExpressionFix</QuickFix>
  </Warning>

  <Warning name="LambdaCanBeReplacedWithBuiltinFunction" configurableSeverity="FSharpBuiltinFunctionReimplementation">
    <Parameter type="ILambdaExpr" name="lambda"/>
    <Parameter type="string" name="funName"/>
    <Range>lambda.GetHighlightingRange()</Range>
    <Message value="{0}">
      <Argument>sprintf "Lambda can be replaced with '%s'" funName</Argument>
    </Message>
    <QuickFix>ReplaceLambdaWithBuiltinFunctionFix</QuickFix>
  </Warning>

  <Warning name="UseWildSelfId" configurableSeverity="FSharpUseWildSelfId">
    <Parameter type="INamedSelfId" name="selfId" />
    <Message value="Use '_'"/>
    <Range>selfId.GetDocumentRange()</Range>
    <QuickFix>UseWildSelfIdFix</QuickFix>
  </Warning>

  <Warning name="InterpolatedStringCandidate" configurableSeverity="FSharpInterpolatedString">
    <Parameter type="ILiteralExpr" name="formatStringExpr"/>
    <Parameter type="IPrefixAppExpr" name="prefixAppExpr"/>
    <Parameter type="IFSharpExpression" name="outerPrefixAppExpr"/>
    <Parameter type="(DocumentRange * IFSharpExpression) list" name="formatSpecsAndExprs" isValid="skip"/>
    <Range>formatStringExpr.GetHighlightingRange()</Range>
    <Message value="Format string can be replaced with an interpolated string"/>
    <QuickFix>ReplaceWithInterpolatedStringFix</QuickFix>
  </Warning>

  <Warning name="RedundantStringInterpolation" configurableSeverity="FSharpRedundantStringInterpolation">
    <Parameter type="IInterpolatedStringExpr" name="expr"/>
    <Message value="Redundant string interpolation"/>
    <Behavour attributeID="DEADCODE" overlapResolvePolicy="DEADCODE"/>
    <Range>expr.GetDollarSignRange()</Range>
    <QuickFix>ReplaceWithRegularStringFix</QuickFix>
  </Warning>

  <Warning name="ExpressionCanBeReplacedWithCondition" configurableSeverity="FSharpExpressionCanBeReplacedWithCondition">
    <Parameter type="IIfThenElseExpr" name="expr"/>
    <Parameter type="bool" name="needsNegation"/>
    <Message value="{0}">
      <Argument>
        if needsNegation then "Expression can be replaced with condition negation"
        else "Expression can be replaced with condition"
      </Argument>
    </Message>
    <Range>expr.GetDocumentRange()</Range>
    <QuickFix>ReplaceWithConditionFix</QuickFix>
  </Warning>

  <Warning name="RedundantAsPattern" configurableSeverity="FSharpRedundantAsPattern">
    <Parameter type="IAsPat" name="asPat"/>
    <Message value="Redundant 'as' pattern"/>
    <Behavour attributeID="DEADCODE" overlapResolvePolicy="DEADCODE"/>
    <Range>getAsPatternRange asPat</Range>
    <QuickFix>RemoveRedundantAsPatFix</QuickFix>
  </Warning>

  <Warning name="RedundantIndexerDot" configurableSeverity="FSharpRedundantDotInIndexer">
    <Parameter type="IItemIndexerExpr" name="indexerExpr"/>
    <Message value="Redundant '.'"/>
    <Behavour attributeID="DEADCODE" overlapResolvePolicy="DEADCODE"/>
    <Range>getIndexerDotRange indexerExpr</Range>
    <QuickFix>RemoveIndexerDotFix</QuickFix>
  </Warning>
</Errors>
