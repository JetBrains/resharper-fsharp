namespace global (1-3)
type GlobalType (3-3)
namespace N1.N (5-62)
module M1 (7-62)
module M1 val x: int (9-9)
module M1 val f: x: 'a -> 'a (10-10)
module M1 val (+): a: int -> b: int -> int (11-11)
module M1 val (|One|_|): x: 'a -> 'a option (12-12)
module M1 exception E1 (15-16)
module M1 exception E1 member NewMessage: string (16-16)
module M1 type Record (18-21)
module M1 type DU (23-25)
module M1 type Struct (27-32)
module M1 type Struct new: x: float * y: float -> Struct (31-31)
module M1 type IInterface inherit IDisposable, IList<string> (34-38)
module M1 type IInterface member M: x: int -> unit (38-38)
module M1 type List<'a> with (40-41)
module M1 type List<'a> member Length: int (41-41)
module M1 type GenericType<'t> inherit ResizeArray<int> (43-59)
module M1 type GenericType<'t> new: x: string -> GenericType<'t> (43-43)
module M1 type GenericType<'t> val x: int (45-45)
module M1 type GenericType<'t> val staticX: int (46-46)
module M1 type GenericType<'t> new: x: 't -> GenericType<'t> (48-48)
module M1 type GenericType<'t> member Method1: x: ('a -> int) -> (y: 'a * z: int) -> int (50-50)
module M1 type GenericType<'t> member Method2: x: 'a * ?y: int -> int (51-51)
module M1 type GenericType<'t> member Prop1: int with get (52-52)
module M1 type GenericType<'t> member Prop2: int with get, set (53-53)
module M1 type GenericType<'t> interface IDisposable (55-56)
module M1 type GenericType<'t> interface IDisposable member Dispose: unit -> unit (56-56)
module M1 type GenericType<'t> interface IList<string> (58-59)
module M1 type GenericType<'t> interface IList<string> member Add: item: string -> unit (59-59)
module M1.NestedModule (61-62)
module M1.NestedModule val x: int (62-62)
namespace N2.N (64-64)
