Language: PsiLanguageType:F#
IFSharpImplFile
  IAnonModuleDeclaration
    ILetBindingsDeclaration
      ITopBinding
        IAttributeList
          FSharpTokenType+LbrackLessTokenElement(type:LBRACK_LESS, text:[<)
          IAttribute
            ITypeReferenceName
              FSharpIdentifierToken(type:IDENTIFIER, text:Foo)
          FSharpTokenType+GreaterRbrackTokenElement(type:GREATER_RBRACK, text:>])
        NewLine(type:NEW_LINE, text:\n) spaces:"\n"
        FSharpTokenType+LetTokenElement(type:LET, text:let)
        Whitespace(type:WHITE_SPACE, text: ) spaces:" "
        FSharpTokenType+RecTokenElement(type:REC, text:rec)
        Whitespace(type:WHITE_SPACE, text: ) spaces:" "
        IAttributeList
          FSharpTokenType+LbrackLessTokenElement(type:LBRACK_LESS, text:[<)
          IAttribute
            ITypeReferenceName
              FSharpIdentifierToken(type:IDENTIFIER, text:Bar)
          FSharpTokenType+GreaterRbrackTokenElement(type:GREATER_RBRACK, text:>])
        Whitespace(type:WHITE_SPACE, text: ) spaces:" "
        ITopReferencePat
          FSharpTokenType+PublicTokenElement(type:PUBLIC, text:public)
          Whitespace(type:WHITE_SPACE, text: ) spaces:" "
          IExpressionReferenceName
            FSharpIdentifierToken(type:IDENTIFIER, text:x)
        Whitespace(type:WHITE_SPACE, text: ) spaces:" "
        FSharpTokenType+EqualsTokenElement(type:EQUALS, text:=)
        Whitespace(type:WHITE_SPACE, text: ) spaces:" "
        IChameleonExpression
          ILiteralExpr
            FSharpToken(type:INT32, text:1)
      NewLine(type:NEW_LINE, text:\n) spaces:"\n"
      ITopBinding
        FSharpTokenType+AndTokenElement(type:AND, text:and)
        Whitespace(type:WHITE_SPACE, text: ) spaces:" "
        IAttributeList
          FSharpTokenType+LbrackLessTokenElement(type:LBRACK_LESS, text:[<)
          IAttribute
            ITypeReferenceName
              FSharpIdentifierToken(type:IDENTIFIER, text:Baz)
          FSharpTokenType+GreaterRbrackTokenElement(type:GREATER_RBRACK, text:>])
        Whitespace(type:WHITE_SPACE, text: ) spaces:" "
        ITopReferencePat
          FSharpTokenType+InternalTokenElement(type:INTERNAL, text:internal)
          Whitespace(type:WHITE_SPACE, text: ) spaces:" "
          IExpressionReferenceName
            FSharpIdentifierToken(type:IDENTIFIER, text:y)
        Whitespace(type:WHITE_SPACE, text: ) spaces:" "
        FSharpTokenType+EqualsTokenElement(type:EQUALS, text:=)
        Whitespace(type:WHITE_SPACE, text: ) spaces:" "
        IChameleonExpression
          ILiteralExpr
            FSharpToken(type:INT32, text:1)

