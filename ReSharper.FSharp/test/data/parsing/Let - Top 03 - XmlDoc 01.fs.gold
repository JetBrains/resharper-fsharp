Language: PsiLanguageType:F#
IFSharpImplFile
  IAnonModuleDeclaration
    ILetBindingsDeclaration
      ITopBinding
        XmlDocBlock
          DocComment(type:LINE_COMMENT, text:///A1)
        NewLine(type:NEW_LINE, text:\n) spaces:"\n"
        FSharpTokenType+LetTokenElement(type:LET, text:let)
        Whitespace(type:WHITE_SPACE, text: ) spaces:" "
        FSharpTokenType+RecTokenElement(type:REC, text:rec)
        Whitespace(type:WHITE_SPACE, text: ) spaces:" "
        ITopReferencePat
          IExpressionReferenceName
            FSharpIdentifierToken(type:IDENTIFIER, text:f)
        Whitespace(type:WHITE_SPACE, text: ) spaces:" "
        IParametersPatternDeclaration
          ILocalReferencePat
            IExpressionReferenceName
              FSharpIdentifierToken(type:IDENTIFIER, text:x)
        Whitespace(type:WHITE_SPACE, text: ) spaces:" "
        FSharpTokenType+EqualsTokenElement(type:EQUALS, text:=)
        Whitespace(type:WHITE_SPACE, text: ) spaces:" "
        IChameleonExpression
          IPrefixAppExpr
            IReferenceExpr
              FSharpIdentifierToken(type:IDENTIFIER, text:g)
            Whitespace(type:WHITE_SPACE, text: ) spaces:" "
            IReferenceExpr
              FSharpIdentifierToken(type:IDENTIFIER, text:x)
      NewLine(type:NEW_LINE, text:\n) spaces:"\n"
      NewLine(type:NEW_LINE, text:\n) spaces:"\n"
      ITopBinding
        XmlDocBlock
          DocComment(type:LINE_COMMENT, text:///A2)
        NewLine(type:NEW_LINE, text:\n) spaces:"\n"
        FSharpTokenType+AndTokenElement(type:AND, text:and)
        Whitespace(type:WHITE_SPACE, text: ) spaces:" "
        ITopReferencePat
          IExpressionReferenceName
            FSharpIdentifierToken(type:IDENTIFIER, text:g)
        Whitespace(type:WHITE_SPACE, text: ) spaces:" "
        IParametersPatternDeclaration
          ILocalReferencePat
            IExpressionReferenceName
              FSharpIdentifierToken(type:IDENTIFIER, text:x)
        Whitespace(type:WHITE_SPACE, text: ) spaces:" "
        FSharpTokenType+EqualsTokenElement(type:EQUALS, text:=)
        Whitespace(type:WHITE_SPACE, text: ) spaces:" "
        IChameleonExpression
          IPrefixAppExpr
            IReferenceExpr
              FSharpIdentifierToken(type:IDENTIFIER, text:k)
            Whitespace(type:WHITE_SPACE, text: ) spaces:" "
            IReferenceExpr
              FSharpIdentifierToken(type:IDENTIFIER, text:x)
      NewLine(type:NEW_LINE, text:\n) spaces:"\n"
      NewLine(type:NEW_LINE, text:\n) spaces:"\n"
      FSharpTokenType+AndTokenElement(type:AND, text:and)
      Whitespace(type:WHITE_SPACE, text: ) spaces:" "
      ITopBinding
        XmlDocBlock
          DocComment(type:LINE_COMMENT, text:///A3)
        NewLine(type:NEW_LINE, text:\n) spaces:"\n"
        Whitespace(type:WHITE_SPACE, text:    ) spaces:"    "
        ITopReferencePat
          IExpressionReferenceName
            FSharpIdentifierToken(type:IDENTIFIER, text:k)
        Whitespace(type:WHITE_SPACE, text: ) spaces:" "
        IParametersPatternDeclaration
          ILocalReferencePat
            IExpressionReferenceName
              FSharpIdentifierToken(type:IDENTIFIER, text:x)
        Whitespace(type:WHITE_SPACE, text: ) spaces:" "
        FSharpTokenType+EqualsTokenElement(type:EQUALS, text:=)
        Whitespace(type:WHITE_SPACE, text: ) spaces:" "
        IChameleonExpression
          IPrefixAppExpr
            IReferenceExpr
              FSharpIdentifierToken(type:IDENTIFIER, text:f)
            Whitespace(type:WHITE_SPACE, text: ) spaces:" "
            IReferenceExpr
              FSharpIdentifierToken(type:IDENTIFIER, text:x)
    NewLine(type:NEW_LINE, text:\n) spaces:"\n"

