Language: PsiLanguageType:F#
IFSharpImplFile
  IAnonModuleDeclaration
    ITypeDeclarationGroup
      IFSharpTypeDeclaration
        FSharpTokenType+TypeTokenElement(type:TYPE, text:type)
        Whitespace(type:WHITE_SPACE, text: ) spaces:" "
        FSharpIdentifierToken(type:IDENTIFIER, text:C)
        IPostfixTypeParameterDeclarationList
          FSharpTokenType+LessTokenElement(type:LESS, text:<)
          ITypeParameterOfTypeDeclaration
            FSharpTokenType+QuoteTokenElement(type:QUOTE, text:')
            FSharpIdentifierToken(type:IDENTIFIER, text:T)
          FSharpTokenType+GreaterTokenElement(type:GREATER, text:>)
        Whitespace(type:WHITE_SPACE, text: ) spaces:" "
        ITypeConstraintsClause
          FSharpTokenType+WhenTokenElement(type:WHEN, text:when)
          Whitespace(type:WHITE_SPACE, text: ) spaces:" "
          ISubtypeConstraint
            ITypeReferenceName
              ITypeParameterId
                FSharpTokenType+QuoteTokenElement(type:QUOTE, text:')
                FSharpIdentifierToken(type:IDENTIFIER, text:T)
            Whitespace(type:WHITE_SPACE, text: ) spaces:" "
            FSharpTokenType+ColonGreaterTokenElement(type:COLON_GREATER, text::>)
            Whitespace(type:WHITE_SPACE, text: ) spaces:" "
            INamedTypeUsage
              ITypeReferenceName
                FSharpIdentifierToken(type:IDENTIFIER, text:I)
        NewLine(type:NEW_LINE, text:\n) spaces:"\n"
        Whitespace(type:WHITE_SPACE, text:        ) spaces:"        "
        IPrimaryConstructorDeclaration
          XmlDocBlock
            DocComment(type:LINE_COMMENT, text:/// Default)
            NewLine(type:NEW_LINE, text:\n) spaces:"\n"
            Whitespace(type:WHITE_SPACE, text:        ) spaces:"        "
            DocComment(type:LINE_COMMENT, text:/// .ctor)
          NewLine(type:NEW_LINE, text:\n) spaces:"\n"
          Whitespace(type:WHITE_SPACE, text:        ) spaces:"        "
          IParametersPatternDeclaration
            IUnitPat
              FSharpTokenType+LparenTokenElement(type:LPAREN, text:()
              FSharpTokenType+RparenTokenElement(type:RPAREN, text:))
        Whitespace(type:WHITE_SPACE, text: ) spaces:" "
        FSharpTokenType+EqualsTokenElement(type:EQUALS, text:=)
        NewLine(type:NEW_LINE, text:\n) spaces:"\n"
        Whitespace(type:WHITE_SPACE, text:    ) spaces:"    "
        IDoStatement
          FSharpTokenType+DoTokenElement(type:DO, text:do)
          Whitespace(type:WHITE_SPACE, text: ) spaces:" "
          IChameleonExpression
            IUnitExpr
              FSharpTokenType+LparenTokenElement(type:LPAREN, text:()
              FSharpTokenType+RparenTokenElement(type:RPAREN, text:))
    NewLine(type:NEW_LINE, text:\n) spaces:"\n"

