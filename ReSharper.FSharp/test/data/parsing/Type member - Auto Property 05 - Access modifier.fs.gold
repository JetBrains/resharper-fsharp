Language: PsiLanguageType:F#
IFSharpImplFile
  INamedModuleDeclaration
    FSharpTokenType+ModuleTokenElement(type:MODULE, text:module)
    Whitespace(type:WHITE_SPACE, text: ) spaces:" "
    FSharpIdentifierToken(type:IDENTIFIER, text:Module)
    NewLine(type:NEW_LINE, text:\n) spaces:"\n"
    NewLine(type:NEW_LINE, text:\n) spaces:"\n"
    ITypeDeclarationGroup
      IFSharpTypeDeclaration
        FSharpTokenType+TypeTokenElement(type:TYPE, text:type)
        Whitespace(type:WHITE_SPACE, text: ) spaces:" "
        FSharpIdentifierToken(type:IDENTIFIER, text:T)
        IPrimaryConstructorDeclaration
          IPatternParameterDeclarationGroup
            IPatternParameterDeclaration
              IUnitPat
                FSharpTokenType+LparenTokenElement(type:LPAREN, text:()
                FSharpTokenType+RparenTokenElement(type:RPAREN, text:))
        Whitespace(type:WHITE_SPACE, text: ) spaces:" "
        FSharpTokenType+EqualsTokenElement(type:EQUALS, text:=)
        NewLine(type:NEW_LINE, text:\n) spaces:"\n"
        Whitespace(type:WHITE_SPACE, text:    ) spaces:"    "
        IAutoPropertyDeclaration
          FSharpTokenType+MemberTokenElement(type:MEMBER, text:member)
          Whitespace(type:WHITE_SPACE, text: ) spaces:" "
          FSharpTokenType+ValTokenElement(type:VAL, text:val)
          Whitespace(type:WHITE_SPACE, text: ) spaces:" "
          FSharpTokenType+PrivateTokenElement(type:PRIVATE, text:private)
          Whitespace(type:WHITE_SPACE, text: ) spaces:" "
          FSharpIdentifierToken(type:IDENTIFIER, text:P)
          Whitespace(type:WHITE_SPACE, text: ) spaces:" "
          FSharpTokenType+EqualsTokenElement(type:EQUALS, text:=)
          Whitespace(type:WHITE_SPACE, text: ) spaces:" "
          IChameleonExpression
            ILiteralExpr
              FSharpToken(type:INT32, text:1)
          Whitespace(type:WHITE_SPACE, text: ) spaces:" "
          IAccessorsNamesClause
            FSharpTokenType+WithTokenElement(type:WITH, text:with)
            Whitespace(type:WHITE_SPACE, text: ) spaces:" "
            FSharpIdentifierToken(type:IDENTIFIER, text:get)
            FSharpTokenType+CommaTokenElement(type:COMMA, text:,)
            Whitespace(type:WHITE_SPACE, text: ) spaces:" "
            FSharpIdentifierToken(type:IDENTIFIER, text:set)
  NewLine(type:NEW_LINE, text:\n) spaces:"\n"

