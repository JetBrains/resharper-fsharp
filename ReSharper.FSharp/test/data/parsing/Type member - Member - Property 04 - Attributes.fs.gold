Language: PsiLanguageType:F#
IFSharpImplFile
  IGlobalNamespaceDeclaration
    FSharpTokenType+NamespaceTokenElement(type:NAMESPACE, text:namespace)
    Whitespace(type:WHITE_SPACE, text: ) spaces:" "
    FSharpTokenType+GlobalTokenElement(type:GLOBAL, text:global)
    NewLine(type:NEW_LINE, text:\n) spaces:"\n"
    ITypeDeclarationGroup
      IFSharpTypeDeclaration
        FSharpTokenType+TypeTokenElement(type:TYPE, text:type)
        Whitespace(type:WHITE_SPACE, text: ) spaces:" "
        FSharpIdentifierToken(type:IDENTIFIER, text:T)
        IPrimaryConstructorDeclaration
          IPatternParameterDeclarationGroup
            IPatternParameterDeclaration
              IUnitPat
                FSharpTokenType+LparenTokenElement(type:LPAREN, text:()
                FSharpTokenType+RparenTokenElement(type:RPAREN, text:))
        Whitespace(type:WHITE_SPACE, text: ) spaces:" "
        FSharpTokenType+EqualsTokenElement(type:EQUALS, text:=)
        NewLine(type:NEW_LINE, text:\n) spaces:"\n"
        Whitespace(type:WHITE_SPACE, text:    ) spaces:"    "
        IMemberDeclaration
          IAttributeList
            FSharpTokenType+LbrackLessTokenElement(type:LBRACK_LESS, text:[<)
            IAttribute
              ITypeReferenceName
                FSharpIdentifierToken(type:IDENTIFIER, text:CompiledName)
              Whitespace(type:WHITE_SPACE, text: ) spaces:" "
              IChameleonExpression
                ILiteralExpr
                  FSharpString(type:STRING, text:"A1")
            FSharpTokenType+GreaterRbrackTokenElement(type:GREATER_RBRACK, text:>])
          NewLine(type:NEW_LINE, text:\n) spaces:"\n"
          Whitespace(type:WHITE_SPACE, text:    ) spaces:"    "
          FSharpTokenType+MemberTokenElement(type:MEMBER, text:member)
          Whitespace(type:WHITE_SPACE, text: ) spaces:" "
          INamedSelfId
            FSharpIdentifierToken(type:IDENTIFIER, text:x)
          FSharpTokenType+DotTokenElement(type:DOT, text:.)
          FSharpIdentifierToken(type:IDENTIFIER, text:A)
          NewLine(type:NEW_LINE, text:\n) spaces:"\n"
          Whitespace(type:WHITE_SPACE, text:        ) spaces:"        "
          FSharpTokenType+WithTokenElement(type:WITH, text:with)
          Whitespace(type:WHITE_SPACE, text: ) spaces:" "
          IAccessorDeclaration
            FSharpIdentifierToken(type:IDENTIFIER, text:get)
            Whitespace(type:WHITE_SPACE, text: ) spaces:" "
            IPatternParameterDeclarationGroup
              FSharpTokenType+LparenTokenElement(type:LPAREN, text:()
              IPatternParameterDeclaration
                ITypedPat
                  IWildPat
                    FSharpTokenType+UnderscoreTokenElement(type:UNDERSCORE, text:_)
                  FSharpTokenType+ColonTokenElement(type:COLON, text::)
                  Whitespace(type:WHITE_SPACE, text: ) spaces:" "
                  INamedTypeUsage
                    ITypeReferenceName
                      FSharpIdentifierToken(type:IDENTIFIER, text:int)
              FSharpTokenType+RparenTokenElement(type:RPAREN, text:))
            Whitespace(type:WHITE_SPACE, text: ) spaces:" "
            FSharpTokenType+EqualsTokenElement(type:EQUALS, text:=)
            Whitespace(type:WHITE_SPACE, text: ) spaces:" "
            IChameleonExpression
              ILiteralExpr
                FSharpToken(type:INT32, text:1)
          NewLine(type:NEW_LINE, text:\n) spaces:"\n"
          Whitespace(type:WHITE_SPACE, text:        ) spaces:"        "
          FSharpTokenType+AndTokenElement(type:AND, text:and)
          Whitespace(type:WHITE_SPACE, text: ) spaces:" "
          IAccessorDeclaration
            FSharpIdentifierToken(type:IDENTIFIER, text:set)
            Whitespace(type:WHITE_SPACE, text: ) spaces:" "
            IPatternParameterDeclarationGroup
              FSharpTokenType+LparenTokenElement(type:LPAREN, text:()
              IPatternParameterDeclaration
                ITypedPat
                  IWildPat
                    FSharpTokenType+UnderscoreTokenElement(type:UNDERSCORE, text:_)
                  FSharpTokenType+ColonTokenElement(type:COLON, text::)
                  Whitespace(type:WHITE_SPACE, text: ) spaces:" "
                  INamedTypeUsage
                    ITypeReferenceName
                      FSharpIdentifierToken(type:IDENTIFIER, text:int)
              FSharpTokenType+RparenTokenElement(type:RPAREN, text:))
            Whitespace(type:WHITE_SPACE, text: ) spaces:" "
            IPatternParameterDeclarationGroup
              FSharpTokenType+LparenTokenElement(type:LPAREN, text:()
              IPatternParameterDeclaration
                ITypedPat
                  IWildPat
                    FSharpTokenType+UnderscoreTokenElement(type:UNDERSCORE, text:_)
                  FSharpTokenType+ColonTokenElement(type:COLON, text::)
                  Whitespace(type:WHITE_SPACE, text: ) spaces:" "
                  INamedTypeUsage
                    ITypeReferenceName
                      FSharpIdentifierToken(type:IDENTIFIER, text:int)
              FSharpTokenType+RparenTokenElement(type:RPAREN, text:))
            Whitespace(type:WHITE_SPACE, text: ) spaces:" "
            FSharpTokenType+EqualsTokenElement(type:EQUALS, text:=)
            Whitespace(type:WHITE_SPACE, text: ) spaces:" "
            IChameleonExpression
              IUnitExpr
                FSharpTokenType+LparenTokenElement(type:LPAREN, text:()
                FSharpTokenType+RparenTokenElement(type:RPAREN, text:))
  NewLine(type:NEW_LINE, text:\n) spaces:"\n"

