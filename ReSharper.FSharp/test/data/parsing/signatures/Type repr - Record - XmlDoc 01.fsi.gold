Language: PsiLanguageType:F#
IFSharpSigFile
  INamedModuleDeclaration
    FSharpTokenType+ModuleTokenElement(type:MODULE, text:module)
    Whitespace(type:WHITE_SPACE, text: ) spaces:" "
    FSharpIdentifierToken(type:IDENTIFIER, text:Module)
    NewLine(type:NEW_LINE, text:\n) spaces:"\n"
    NewLine(type:NEW_LINE, text:\n) spaces:"\n"
    ITypeDeclarationGroup
      IFSharpTypeDeclaration
        FSharpTokenType+TypeTokenElement(type:TYPE, text:type)
        Whitespace(type:WHITE_SPACE, text: ) spaces:" "
        FSharpIdentifierToken(type:IDENTIFIER, text:R)
        Whitespace(type:WHITE_SPACE, text: ) spaces:" "
        FSharpTokenType+EqualsTokenElement(type:EQUALS, text:=)
        NewLine(type:NEW_LINE, text:\n) spaces:"\n"
        Whitespace(type:WHITE_SPACE, text:    ) spaces:"    "
        IRecordRepresentation
          FSharpTokenType+LbraceTokenElement(type:LBRACE, text:{)
          Whitespace(type:WHITE_SPACE, text: ) spaces:" "
          IRecordFieldDeclarationList
            IRecordFieldDeclaration
              XmlDocBlock
                DocComment(type:LINE_COMMENT, text:///A1)
                NewLine(type:NEW_LINE, text:\n) spaces:"\n"
                Whitespace(type:WHITE_SPACE, text:      ) spaces:"      "
                DocComment(type:LINE_COMMENT, text:///A2)
              NewLine(type:NEW_LINE, text:\n) spaces:"\n"
              Whitespace(type:WHITE_SPACE, text:      ) spaces:"      "
              FSharpIdentifierToken(type:IDENTIFIER, text:Field1)
              FSharpTokenType+ColonTokenElement(type:COLON, text::)
              Whitespace(type:WHITE_SPACE, text: ) spaces:" "
              INamedTypeUsage
                ITypeReferenceName
                  FSharpIdentifierToken(type:IDENTIFIER, text:int)
            FSharpTokenType+SemicolonTokenElement(type:SEMICOLON, text:;)
            NewLine(type:NEW_LINE, text:\n) spaces:"\n"
            NewLine(type:NEW_LINE, text:\n) spaces:"\n"
            Whitespace(type:WHITE_SPACE, text:      ) spaces:"      "
            IRecordFieldDeclaration
              XmlDocBlock
                DocComment(type:LINE_COMMENT, text:///A1)
                NewLine(type:NEW_LINE, text:\n) spaces:"\n"
                Whitespace(type:WHITE_SPACE, text:      ) spaces:"      "
                DocComment(type:LINE_COMMENT, text:///A2  )
              NewLine(type:NEW_LINE, text:\n) spaces:"\n"
              Whitespace(type:WHITE_SPACE, text:      ) spaces:"      "
              FSharpTokenType+MutableTokenElement(type:MUTABLE, text:mutable)
              Whitespace(type:WHITE_SPACE, text: ) spaces:" "
              FSharpIdentifierToken(type:IDENTIFIER, text:Field2)
              FSharpTokenType+ColonTokenElement(type:COLON, text::)
              Whitespace(type:WHITE_SPACE, text: ) spaces:" "
              INamedTypeUsage
                ITypeReferenceName
                  FSharpIdentifierToken(type:IDENTIFIER, text:int)
            FSharpTokenType+SemicolonTokenElement(type:SEMICOLON, text:;)
            NewLine(type:NEW_LINE, text:\n) spaces:"\n"
            NewLine(type:NEW_LINE, text:\n) spaces:"\n"
            Whitespace(type:WHITE_SPACE, text:      ) spaces:"      "
            IRecordFieldDeclaration
              XmlDocBlock
                DocComment(type:LINE_COMMENT, text:///A1)
                NewLine(type:NEW_LINE, text:\n) spaces:"\n"
                Whitespace(type:WHITE_SPACE, text:      ) spaces:"      "
                DocComment(type:LINE_COMMENT, text:///A2)
              NewLine(type:NEW_LINE, text:\n) spaces:"\n"
              Whitespace(type:WHITE_SPACE, text:      ) spaces:"      "
              IAttributeList
                FSharpTokenType+LbrackLessTokenElement(type:LBRACK_LESS, text:[<)
                IAttribute
                  ITypeReferenceName
                    FSharpIdentifierToken(type:IDENTIFIER, text:Foo)
                FSharpTokenType+GreaterRbrackTokenElement(type:GREATER_RBRACK, text:>])
              Whitespace(type:WHITE_SPACE, text: ) spaces:" "
              FSharpIdentifierToken(type:IDENTIFIER, text:Field3)
              FSharpTokenType+ColonTokenElement(type:COLON, text::)
              Whitespace(type:WHITE_SPACE, text: ) spaces:" "
              INamedTypeUsage
                ITypeReferenceName
                  FSharpIdentifierToken(type:IDENTIFIER, text:int)
          Whitespace(type:WHITE_SPACE, text: ) spaces:" "
          FSharpTokenType+RbraceTokenElement(type:RBRACE, text:})
  NewLine(type:NEW_LINE, text:\n) spaces:"\n"

