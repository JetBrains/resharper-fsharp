Language: PsiLanguageType:F#
IFSharpImplFile
  IAnonModuleDeclaration
    ITypeDeclarationGroup
      IFSharpTypeDeclaration
        FSharpTokenType+TypeTokenElement(type:TYPE, text:type)
        Whitespace(type:WHITE_SPACE, text: ) spaces:" "
        FSharpIdentifierToken(type:IDENTIFIER, text:A)
        Whitespace(type:WHITE_SPACE, text: ) spaces:" "
        FSharpTokenType+EqualsTokenElement(type:EQUALS, text:=)
        NewLine(type:NEW_LINE, text:\n) spaces:"\n"
        Whitespace(type:WHITE_SPACE, text:    ) spaces:"    "
        IMemberDeclaration
          FSharpTokenType+MemberTokenElement(type:MEMBER, text:member)
          Whitespace(type:WHITE_SPACE, text: ) spaces:" "
          INamedSelfId
            FSharpIdentifierToken(type:IDENTIFIER, text:x)
          FSharpTokenType+DotTokenElement(type:DOT, text:.)
          FSharpIdentifierToken(type:IDENTIFIER, text:M)
          IParametersPatternDeclaration
            IUnitPat
              FSharpTokenType+LparenTokenElement(type:LPAREN, text:()
              FSharpTokenType+RparenTokenElement(type:RPAREN, text:))
          Whitespace(type:WHITE_SPACE, text: ) spaces:" "
          FSharpTokenType+EqualsTokenElement(type:EQUALS, text:=)
          NewLine(type:NEW_LINE, text:\n) spaces:"\n"
          Whitespace(type:WHITE_SPACE, text:        ) spaces:"        "
          IChameleonExpression
            ILetOrUseExpr
              ILocalBinding
                XmlDocBlock
                  DocComment(type:LINE_COMMENT, text:///A)
                NewLine(type:NEW_LINE, text:\n) spaces:"\n"
                Whitespace(type:WHITE_SPACE, text:        ) spaces:"        "
                FSharpTokenType+LetTokenElement(type:LET, text:let)
                Whitespace(type:WHITE_SPACE, text: ) spaces:" "
                ILocalReferencePat
                  IExpressionReferenceName
                    FSharpIdentifierToken(type:IDENTIFIER, text:a)
                Whitespace(type:WHITE_SPACE, text: ) spaces:" "
                FSharpTokenType+EqualsTokenElement(type:EQUALS, text:=)
                Whitespace(type:WHITE_SPACE, text: ) spaces:" "
                ILiteralExpr
                  FSharpToken(type:INT32, text:3)
              NewLine(type:NEW_LINE, text:\n) spaces:"\n"
              Whitespace(type:WHITE_SPACE, text:        ) spaces:"        "
              IUnitExpr
                FSharpTokenType+LparenTokenElement(type:LPAREN, text:()
                FSharpTokenType+RparenTokenElement(type:RPAREN, text:))
    NewLine(type:NEW_LINE, text:\n) spaces:"\n"

