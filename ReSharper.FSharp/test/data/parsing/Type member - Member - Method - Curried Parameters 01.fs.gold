Language: PsiLanguageType:F#
IFSharpImplFile
  INamedModuleDeclaration
    FSharpTokenType+ModuleTokenElement(type:MODULE, text:module)
    Whitespace(type:WHITE_SPACE, text: ) spaces:" "
    FSharpIdentifierToken(type:IDENTIFIER, text:Module)
    NewLine(type:NEW_LINE, text:\n) spaces:"\n"
    NewLine(type:NEW_LINE, text:\n) spaces:"\n"
    ITypeDeclarationGroup
      IFSharpTypeDeclaration
        FSharpTokenType+TypeTokenElement(type:TYPE, text:type)
        Whitespace(type:WHITE_SPACE, text: ) spaces:" "
        FSharpIdentifierToken(type:IDENTIFIER, text:T)
        Whitespace(type:WHITE_SPACE, text: ) spaces:" "
        FSharpTokenType+EqualsTokenElement(type:EQUALS, text:=)
        NewLine(type:NEW_LINE, text:\n) spaces:"\n"
        Whitespace(type:WHITE_SPACE, text:    ) spaces:"    "
        IMemberDeclaration
          FSharpTokenType+StaticTokenElement(type:STATIC, text:static)
          Whitespace(type:WHITE_SPACE, text: ) spaces:" "
          FSharpTokenType+MemberTokenElement(type:MEMBER, text:member)
          Whitespace(type:WHITE_SPACE, text: ) spaces:" "
          FSharpIdentifierToken(type:IDENTIFIER, text:M)
          Whitespace(type:WHITE_SPACE, text: ) spaces:" "
          IPatternParameterDeclarationGroup
            IPatternParameterDeclaration
              ILocalReferencePat
                IExpressionReferenceName
                  FSharpIdentifierToken(type:IDENTIFIER, text:a)
          Whitespace(type:WHITE_SPACE, text: ) spaces:" "
          IPatternParameterDeclarationGroup
            IPatternParameterDeclaration
              ILocalReferencePat
                IExpressionReferenceName
                  FSharpIdentifierToken(type:IDENTIFIER, text:b)
          Whitespace(type:WHITE_SPACE, text: ) spaces:" "
          IPatternParameterDeclarationGroup
            IPatternParameterDeclaration
              ILocalReferencePat
                IExpressionReferenceName
                  FSharpIdentifierToken(type:IDENTIFIER, text:c)
          Whitespace(type:WHITE_SPACE, text: ) spaces:" "
          FSharpTokenType+EqualsTokenElement(type:EQUALS, text:=)
          Whitespace(type:WHITE_SPACE, text: ) spaces:" "
          IChameleonExpression
            IUnitExpr
              FSharpTokenType+LparenTokenElement(type:LPAREN, text:()
              FSharpTokenType+RparenTokenElement(type:RPAREN, text:))
  NewLine(type:NEW_LINE, text:\n) spaces:"\n"

