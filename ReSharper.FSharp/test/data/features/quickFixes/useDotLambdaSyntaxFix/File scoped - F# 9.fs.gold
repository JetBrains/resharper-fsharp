open System
open System.Linq
open System.Linq.Expressions

// Available
ignore <| _{caret}.ToString()
ignore <| _.ToString()
ignore <| _.ToString()
ignore <| _.ToString()
ignore <| _.ToString()
ignore <| _.ToString()
ignore <| _.Prop[0]
ignore <| _.Prop.[0]
ignore <| <@ fun x -> _.ToString() @>
[1] |> _.ToString(_.ToString()) |> ignore
[1] |> _.Equals(let x = 5 in x) |> ignore
type A1 = member _.M() = _.ToString()
let f (a, (b, c)) = fun x -> _.ToString()
match 1 with _ -> _.ToString()
let _ = let _ = 3 in _.ToString()

type A = static member M(x: int -> string) = ()
A.M(_.ToString())

ignore <| <@ _.ToString() @>
ignore <| <@@ _.ToString() @@>
[1] |> _.Select(_.ToString()) |> ignore 
[1] |> _.Select(_.ToString()) |> ignore
(fun _ -> _.ToString()) |> ignore
(fun _ -> fun y -> _.ToString()) |> ignore
(fun (a, (b, _)) -> fun y -> _.ToString()) |> ignore
type A2 = member _.M _ = _.ToString()
let g (a, (b, Some _)) = fun x -> _.ToString()

type A with static member M(x: int, y: Func<int, string>) = ()
type A with static member M(x: string, y: Expression<Func<int, string>>) = ()
A.M(1, _.ToString())
A.M("", _.ToString())


// Not available
ignore <| fun x -> x.Equals(x)
ignore <| fun x -> x.ToString ()
ignore <| fun x -> y.ToString()
ignore <| fun x -> (x.ToString)()
[1] |> (fun x -> x[0]) |> ignore
[1] |> (fun x -> x.[0]) |> ignore
ignore <| fun x -> x.ToString()[0]
ignore <| fun (x, y) -> x.ToString()
