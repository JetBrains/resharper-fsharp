module Module

[||]{caret}[1] <- [1
            2]
---------------------------------------------------------

IFSharpImplFile
  INamedModuleDeclaration
    FSharpTokenType+ModuleTokenElement(type:MODULE, text:module)
    Whitespace(type:WHITE_SPACE, text: ) spaces:" "
    FSharpIdentifierToken(type:IDENTIFIER, text:Module)
    NewLine(type:NEW_LINE, text:\n) spaces:"\n"
    NewLine(type:NEW_LINE, text:\n) spaces:"\n"
    IExpressionStatement
      IChameleonExpression
        ISetExpr
          IPrefixAppExpr
            IArrayExpr
              FSharpTokenType+LbrackBarTokenElement(type:LBRACK_BAR, text:[|)
              FSharpTokenType+BarRbrackTokenElement(type:BAR_RBRACK, text:|])
            IListExpr
              FSharpTokenType+LbrackTokenElement(type:LBRACK, text:[)
              ILiteralExpr
                FSharpToken(type:INT32, text:1)
              FSharpTokenType+RbrackTokenElement(type:RBRACK, text:])
          Whitespace(type:WHITE_SPACE, text: ) spaces:" "
          FSharpTokenType+LarrowTokenElement(type:LARROW, text:<-)
          Whitespace(type:WHITE_SPACE, text: ) spaces:" "
          IListExpr
            FSharpTokenType+LbrackTokenElement(type:LBRACK, text:[)
            ISequentialExpr
              ILiteralExpr
                FSharpToken(type:INT32, text:1)
              NewLine(type:NEW_LINE, text:\n) spaces:"\n"
              Whitespace(type:WHITE_SPACE, text:            ) spaces:"            "
              ILiteralExpr
                FSharpToken(type:INT32, text:2)
            FSharpTokenType+RbrackTokenElement(type:RBRACK, text:])
  NewLine(type:NEW_LINE, text:\n) spaces:"\n"
