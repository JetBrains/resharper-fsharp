module Kek

open JetBrains.Annotations
open System.Diagnostics.CodeAnalysis
open System.Text.RegularExpressions

type A() =
    [<RegexPattern>]
    member x.R = "|[|(0)123|]|(1)"

    member x.K = "[123]"

let f ([<RegexPattern>] x: string) = ()
f ("|[|(2)123|]|(3)")
f "|[|(4)123|]|(5)"

let f1 =
    fun _ ->
        fun ([<RegexPattern>] x: string) -> ()
f1 "[123]" "|[|(6)123|]|(7)"

let g (x: string) = ()
g ("[123]")

[<RegexPattern>]
let x = "|[|(8)123|]|(9)"

[<StringSyntax("regex")>]
let y = "|[|(10)123|]|(11)"

let _ =
    ()
    let _ = "|[|(12)123|]|(13)" //language=regex
    ()

Regex(pattern = "|[|(14)123|]|(15)")
Regex((pattern = "[123]"))

---------------------------------------------------------
(0): ReSharper Regex Set: 
(1): ReSharper Regex Set: 
(2): ReSharper Regex Set: 
(3): ReSharper Regex Set: 
(4): ReSharper Regex Set: 
(5): ReSharper Regex Set: 
(6): ReSharper Regex Set: 
(7): ReSharper Regex Set: 
(8): ReSharper Regex Set: 
(9): ReSharper Regex Set: 
(10): ReSharper Regex Set: 
(11): ReSharper Regex Set: 
(12): ReSharper Regex Set: 
(13): ReSharper Regex Set: 
(14): ReSharper Regex Set: 
(15): ReSharper Regex Set: 
