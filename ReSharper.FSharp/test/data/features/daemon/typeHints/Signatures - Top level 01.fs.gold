module Test

open System
open System.Collections.Generic
open System.Runtime.InteropServices

type SingleCaseDU<'a, 'b> = SingleCaseDU of x: 'a
type Record = { Foo: int; Bar: string }

let f _
      1
      ()
      x||(0)
      (y||(1), z||(2) as b)
      ((a||(3), b||(4)), c||(5))
      (SingleCaseDU(x1||(6)))
      (SingleCaseDU(x = x1||(7)) as du)
      { Foo = foo||(8) }
      (KeyValue(a||(9), b||(10)) as kvp||(11)) ||(12)= ()

let typed (x: int)
          (y, z as b: int * int)
          (SingleCaseDU(x1: int))
          (SingleCaseDU(x1): SingleCaseDU<int, int>)
          (SingleCaseDU(x = x1: int) as du)
          { Foo = foo: int; Bar = bar as str: string }
          (KeyValue(a: int, b: int))
          (KeyValue(a, b) as kvp: KeyValuePair<int, int>) : unit = ()

let a||(13), b||(14) =
    let f x y =
        let result = x + y
        result

    for i = 0 to 10 do ()
    for i in Seq.empty do ()

    let a, b = 3, 3
    a, b

let g||(15) = fun x -> ()


type A(x||(16)) =
    do
        let x||(17) = 3
        ()

    let array||(18) = [|""|] 

    new(x||(19), y||(20)) = new A(x + y)

    member _.P1||(21) =
        let x = 1
        x

    member _.P2||(22) = id

    member val P3 = 3 with get, set

    member x.P4||(23)
        with get index||(24) =
            let x = array[index]
            x
        and set index||(25) value||(26) =
            array[index] <- value

    member _.M(x||(27)) (y||(28), z||(29)) ||(30)=
        let res = x + y + z
        res

    member _.M1([<Optional>] ?x||(31), ?y||(32)) ||(33)= x.Value + y.Value + 1

    interface IDisposable with
        member _.Dispose() ||(34)= ()


type Typed(x: int) =
    do
        let x: int = 3
        ()

    let array: string array = [|""|] 

    new(x: int, y: int) = new Typed(x + y)

    member _.P1: int =
        let x: int = 1
        x

    member _.P2: obj -> obj = id

    member val P3: int = 3 with get, set

    member x.P4||(35)
        with get (index: int) =
            let x: string = array[index]
            x
        and set (index: int) (value: string) =
            array[index] <- value

    member _.M(x: int) (y: int, z: int) : int =
        let res: int = x + y + z
        res

    member _.M1([<Optional>] ?x: int, ?y: int) : int = x.Value + y.Value + 1

    interface IDisposable with
        member _.Dispose(): unit = ()

let delimiter (delim1||(36), delim2||(37), value||(38)) ||(39)=
    { new IFormattable with
        member x.ToString(format, provider) =
            if format = "D" then
                delim1 + value + delim2
            else
                value }

[<Struct>]
type MyStruct =
    val mutable myInt : int
    val mutable myString : string


let (|Active|) arg||(40) valueToMatch||(41) ||(42)=
    Active(if arg && valueToMatch = 2 then "" else "")

let (|Active1|Active2|) valueToMatch||(43) ||(44)=
    if valueToMatch then Choice1Of2(1) else Choice2Of2("")

let (|ActiveOption|_|) _ ||(45)= None


let (|Int|) (x: MyStruct) : int = Int(x.myInt)
let (|String|) (x: MyStruct) : string = String(x.myString)

let f1 (x||(46) & Int(i||(47)) & String(s||(48))) ||(49)= ()

---------------------------------------------------------
(0): ReSharper Parameter Name Hint: : 'b
(1): ReSharper Parameter Name Hint: : 'c
(2): ReSharper Parameter Name Hint: : 'd
(3): ReSharper Parameter Name Hint: : 'e
(4): ReSharper Parameter Name Hint: : 'f
(5): ReSharper Parameter Name Hint: : 'g
(6): ReSharper Parameter Name Hint: : 'h
(7): ReSharper Parameter Name Hint: : 'j
(8): ReSharper Parameter Name Hint: : int
(9): ReSharper Parameter Name Hint: : 'l
(10): ReSharper Parameter Name Hint: : 'm
(11): ReSharper Parameter Name Hint: : KeyValuePair<'l,'m>
(12): ReSharper Parameter Name Hint: : unit 
(13): ReSharper Parameter Name Hint: : int
(14): ReSharper Parameter Name Hint: : int
(15): ReSharper Parameter Name Hint: : 'a -> unit
(16): ReSharper Parameter Name Hint: : int
(17): ReSharper Parameter Name Hint: : int
(18): ReSharper Parameter Name Hint: : string array
(19): ReSharper Parameter Name Hint: : int
(20): ReSharper Parameter Name Hint: : int
(21): ReSharper Parameter Name Hint: : int 
(22): ReSharper Parameter Name Hint: : obj -> obj 
(23): ReSharper Parameter Name Hint: : string 
(24): ReSharper Parameter Name Hint: : int
(25): ReSharper Parameter Name Hint: : int
(26): ReSharper Parameter Name Hint: : string
(27): ReSharper Parameter Name Hint: : int
(28): ReSharper Parameter Name Hint: : int
(29): ReSharper Parameter Name Hint: : int
(30): ReSharper Parameter Name Hint: : int 
(31): ReSharper Parameter Name Hint: : int
(32): ReSharper Parameter Name Hint: : int
(33): ReSharper Parameter Name Hint: : int 
(34): ReSharper Parameter Name Hint: : unit 
(35): ReSharper Parameter Name Hint: : string 
(36): ReSharper Parameter Name Hint: : string
(37): ReSharper Parameter Name Hint: : string
(38): ReSharper Parameter Name Hint: : string
(39): ReSharper Parameter Name Hint: : IFormattable 
(40): ReSharper Parameter Name Hint: : bool
(41): ReSharper Parameter Name Hint: : int
(42): ReSharper Parameter Name Hint: : string 
(43): ReSharper Parameter Name Hint: : bool
(44): ReSharper Parameter Name Hint: : Choice<int,string> 
(45): ReSharper Parameter Name Hint: : 'b option 
(46): ReSharper Parameter Name Hint: : MyStruct
(47): ReSharper Parameter Name Hint: : int
(48): ReSharper Parameter Name Hint: : string
(49): ReSharper Parameter Name Hint: : unit 
