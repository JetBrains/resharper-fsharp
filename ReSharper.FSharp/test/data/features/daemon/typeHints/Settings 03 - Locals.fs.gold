module Test

open System

let f x =
    let g x||(0) ||(1)= ()
    let x||(2) = fun y||(3) -> ()
    for x in [""] do ()
    match 5 with x -> () 
    { new IFormattable with
        member x.ToString(format, provider) = "" }

fun x||(4) -> ()

match 5 with
| x when let y||(5) = 5 in true ->
    let z||(6) = 3
    ()

type A(x) =
    do
        let x||(7) = 3
        ()

    let array = [|""|]

    new(x, y) = A(x + y)

    member _.P1 =
        let x||(8) = 1
        x

    member _.P2 = id

    member val P3 = 3 with get, set

    member x.P4
        with get index =
            let x||(9) = array[index]
            x
        and set index value =
            array[index] <- value

    member _.M(x) (y, z) =
        let res||(10) = x + y + z
        res

---------------------------------------------------------
(0): ReSharper Parameter Name Hint: : 'b
(1): ReSharper Parameter Name Hint: : unit 
(2): ReSharper Parameter Name Hint: : 'b -> unit
(3): ReSharper Parameter Name Hint: : 'b
(4): ReSharper Parameter Name Hint: : 'a
(5): ReSharper Parameter Name Hint: : int
(6): ReSharper Parameter Name Hint: : int
(7): ReSharper Parameter Name Hint: : int
(8): ReSharper Parameter Name Hint: : int
(9): ReSharper Parameter Name Hint: : string
(10): ReSharper Parameter Name Hint: : int
