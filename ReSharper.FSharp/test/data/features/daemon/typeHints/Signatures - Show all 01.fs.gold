module Test

open System
open System.Collections.Generic
open System.Runtime.InteropServices

type SingleCaseDU<'a, 'b> = SingleCaseDU of x: 'a
type Record = { Foo: int; Bar: string }

let f _
      ()
      x||(0)
      (y||(1), z||(2) as b)
      ((a||(3), b||(4)), c||(5))
      (SingleCaseDU(x1||(6)))
      (SingleCaseDU(x = x1||(7)) as du)
      { Foo = foo||(8) }
      (KeyValue(a||(9), b||(10)) as kvp||(11)) ||(12)= ()

let typed (x: int)
          (y, z as b: int * int)
          (SingleCaseDU(x1: int))
          (SingleCaseDU(x1): SingleCaseDU<int, int>)
          (SingleCaseDU(x = x1: int) as du)
          { Foo = foo: int; Bar = bar as str: string }
          (KeyValue(a: int, b: int))
          (KeyValue(a, b) as kvp: KeyValuePair<int, int>) : unit = ()

let a||(13), b||(14) =
    let f x||(15) y||(16) ||(17)=
        let result||(18) = x + y
        result

    for i = 0 to 10 do ()
    for i||(19) in Seq.empty do ()

    let a||(20), b||(21) = 3, 3
    a, b

let g||(22) = fun x||(23) -> ()


type A(x||(24)) =
    do
        let x||(25) = 3
        ()

    let array||(26) = [|""|] 

    new(x||(27), y||(28)) = new A(x + y)

    member _.P1||(29) =
        let x||(30) = 1
        x

    member _.P2||(31) = id

    member val P3 = 3 with get, set

    member x.P4||(32)
        with get index||(33) =
            let x||(34) = array[index]
            x
        and set index||(35) value||(36) =
            array[index] <- value

    member _.M(x||(37)) (y||(38), z||(39)) ||(40)=
        let res||(41) = x + y + z
        res

    member _.M1([<Optional>] ?x||(42)) ||(43)= x.Value + 1

    interface IDisposable with
        member _.Dispose() ||(44)= ()


type Typed(x: int) =
    do
        let x: int = 3
        ()

    let array: string array = [|""|] 

    new(x: int, y: int) = new Typed(x + y)

    member _.P1: int =
        let x: int = 1
        x

    member _.P2: obj -> obj = id

    member val P3: int = 3 with get, set

    member x.P4||(45)
        with get (index: int) =
            let x: string = array[index]
            x
        and set (index: int) (value: string) =
            array[index] <- value

    member _.M(x: int) (y: int, z: int) : int =
        let res: int = x + y + z
        res

    member _.M1([<Optional>] ?x: int) : int = x.Value + 1

    interface IDisposable with
        member _.Dispose(): unit = ()

let delimiter (delim1||(46), delim2||(47), value||(48)) ||(49)=
    { new IFormattable with
        member x.ToString(format||(50), provider||(51)) ||(52)=
            if format = "D" then
                delim1 + value + delim2
            else
                value }

[<Struct>]
type MyStruct =
    val mutable myInt : int
    val mutable myString : string


let (|Active|) arg||(53) valueToMatch||(54) ||(55)=
    Active(if arg && valueToMatch = 2 then "" else "")

let (|Active1|Active2|) valueToMatch||(56) ||(57)=
    if valueToMatch then Choice1Of2(1) else Choice2Of2("")

let (|ActiveOption|_|) _ ||(58)= None


let (|Int|) (x: MyStruct) : int = Int(x.myInt)
let (|String|) (x: MyStruct) : string = String(x.myString)

let f1 (x||(59) & Int(i||(60)) & String(s||(61))) ||(62)= ()

---------------------------------------------------------
(0): ReSharper Parameter Name Hint: : 'b
(1): ReSharper Parameter Name Hint: : 'c
(2): ReSharper Parameter Name Hint: : 'd
(3): ReSharper Parameter Name Hint: : 'e
(4): ReSharper Parameter Name Hint: : 'f
(5): ReSharper Parameter Name Hint: : 'g
(6): ReSharper Parameter Name Hint: : 'h
(7): ReSharper Parameter Name Hint: : 'j
(8): ReSharper Parameter Name Hint: : int
(9): ReSharper Parameter Name Hint: : 'l
(10): ReSharper Parameter Name Hint: : 'm
(11): ReSharper Parameter Name Hint: : KeyValuePair<'l,'m>
(12): ReSharper Parameter Name Hint: : unit 
(13): ReSharper Parameter Name Hint: : int
(14): ReSharper Parameter Name Hint: : int
(15): ReSharper Parameter Name Hint: : int
(16): ReSharper Parameter Name Hint: : int
(17): ReSharper Parameter Name Hint: : int 
(18): ReSharper Parameter Name Hint: : int
(19): ReSharper Parameter Name Hint: : obj
(20): ReSharper Parameter Name Hint: : int
(21): ReSharper Parameter Name Hint: : int
(22): ReSharper Parameter Name Hint: : 'a -> unit
(23): ReSharper Parameter Name Hint: : 'a
(24): ReSharper Parameter Name Hint: : int
(25): ReSharper Parameter Name Hint: : int
(26): ReSharper Parameter Name Hint: : string array
(27): ReSharper Parameter Name Hint: : int
(28): ReSharper Parameter Name Hint: : int
(29): ReSharper Parameter Name Hint: : int 
(30): ReSharper Parameter Name Hint: : int
(31): ReSharper Parameter Name Hint: : obj -> obj 
(32): ReSharper Parameter Name Hint: : string 
(33): ReSharper Parameter Name Hint: : int
(34): ReSharper Parameter Name Hint: : string
(35): ReSharper Parameter Name Hint: : int
(36): ReSharper Parameter Name Hint: : string
(37): ReSharper Parameter Name Hint: : int
(38): ReSharper Parameter Name Hint: : int
(39): ReSharper Parameter Name Hint: : int
(40): ReSharper Parameter Name Hint: : int 
(41): ReSharper Parameter Name Hint: : int
(42): ReSharper Parameter Name Hint: : int
(43): ReSharper Parameter Name Hint: : int 
(44): ReSharper Parameter Name Hint: : unit 
(45): ReSharper Parameter Name Hint: : string 
(46): ReSharper Parameter Name Hint: : string
(47): ReSharper Parameter Name Hint: : string
(48): ReSharper Parameter Name Hint: : string
(49): ReSharper Parameter Name Hint: : IFormattable 
(50): ReSharper Parameter Name Hint: : string
(51): ReSharper Parameter Name Hint: : IFormatProvider
(52): ReSharper Parameter Name Hint: : string 
(53): ReSharper Parameter Name Hint: : bool
(54): ReSharper Parameter Name Hint: : int
(55): ReSharper Parameter Name Hint: : string 
(56): ReSharper Parameter Name Hint: : bool
(57): ReSharper Parameter Name Hint: : Choice<int,string> 
(58): ReSharper Parameter Name Hint: : 'b option 
(59): ReSharper Parameter Name Hint: : MyStruct
(60): ReSharper Parameter Name Hint: : int
(61): ReSharper Parameter Name Hint: : string
(62): ReSharper Parameter Name Hint: : unit 
