module Module

open T
let t1 = T()
let t2: |T.|(0)NestedModuleType = |T.|(1)NestedModuleType()
let t3: |T.|(2)AnotherNestedModuleType = |T.|(3)AnotherNestedModuleType()
let v1 = |T.|(4)moduleValue
let v2 = |T.|(5)AnotherNestedModuleType.nestedModuleValue

open GenericT
let v3 = |GenericT.|(6)genericModuleValue

open T.NestedModuleType
let t4 = |T.|(7)NestedModuleType()
let v4 = ||T.|(8)NestedModuleType.|(9)nestedModuleValue

---------------------------------------------------------
(0): ReSharper Dead Code: Qualifier is redundant
(1): ReSharper Dead Code: Qualifier is redundant
(2): ReSharper Dead Code: Qualifier is redundant
(3): ReSharper Dead Code: Qualifier is redundant
(4): ReSharper Dead Code: Qualifier is redundant
(5): ReSharper Dead Code: Qualifier is redundant
(6): ReSharper Dead Code: Qualifier is redundant
(7): ReSharper Dead Code: Qualifier is redundant
(8):<overlapped> ReSharper Dead Code: Qualifier is redundant
(9): ReSharper Dead Code: Qualifier is redundant
