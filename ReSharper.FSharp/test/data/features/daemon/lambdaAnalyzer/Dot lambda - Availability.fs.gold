open System.Linq

// Available
ignore <| |fun x ->|(0) x   .    ToString()
ignore <| |fun x ->|(1) (x).ToString()
ignore <| |fun (x) ->|(2) x.ToString()
ignore <| |fun x ->|(3) (x.ToString())
ignore <| |fun x ->|(4) (x.ToString())
ignore <| |fun x ->|(5) x.Prop[0]
ignore <| fun x -> x.Prop.[0]
[1] |> (fun x -> x.Select(|fun x ->|(6) x.ToString())) |> ignore
[1] |> (|fun x ->|(7) x.Equals(let x = 5 in x)) |> ignore
type A1 = member _.M() = |fun x ->|(8) x.ToString()
let f (a, (b, c)) = fun x -> |fun x ->|(9) x.ToString()
match 1 with _ -> |fun x ->|(10) x.ToString()
let _ = let _ = 3 in |fun x ->|(11) x.ToString()

// Not available

ignore <| fun x -> x.Equals(x)
ignore <| fun x -> x.ToString ()
ignore <| fun x -> y.ToString()
ignore <| fun x -> (x.ToString)()
[1] |> (fun x -> x[0]) |> ignore
[1] |> (fun x -> x.[0]) |> ignore
ignore <| fun x -> x.ToString()[0]
ignore <| fun (x, y) -> x.ToString()
[1] |> (fun x -> x.Select(_.ToString())) |> ignore 
[1] |> _.Select(fun x -> x.ToString()) |> ignore
(fun _ -> fun x -> x.ToString()) |> ignore
(fun _ -> fun y -> fun x -> x.ToString()) |> ignore
(fun (a, (b, _)) -> fun y -> fun x -> x.ToString()) |> ignore
type A2 = member _.M _ = fun x -> x.ToString()
let g (a, (b, Some _)) = fun x -> fun x -> x.ToString()

---------------------------------------------------------
(0): ReSharper Dead Code: Shorthand lambda can be used
(1): ReSharper Dead Code: Shorthand lambda can be used
(2): ReSharper Dead Code: Shorthand lambda can be used
(3): ReSharper Dead Code: Shorthand lambda can be used
(4): ReSharper Dead Code: Shorthand lambda can be used
(5): ReSharper Dead Code: Shorthand lambda can be used
(6): ReSharper Dead Code: Shorthand lambda can be used
(7): ReSharper Dead Code: Shorthand lambda can be used
(8): ReSharper Dead Code: Shorthand lambda can be used
(9): ReSharper Dead Code: Shorthand lambda can be used
(10): ReSharper Dead Code: Shorthand lambda can be used
(11): ReSharper Dead Code: Shorthand lambda can be used
