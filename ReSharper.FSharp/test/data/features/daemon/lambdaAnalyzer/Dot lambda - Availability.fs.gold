// Available
ignore <| |fun x ->|(0) x.ToString()
ignore <| |fun x ->|(1) x   .    ToString()
ignore <| |fun x ->|(2) (x).ToString()
ignore <| |fun (x) ->|(3) x.ToString()
ignore <| |fun x ->|(4) (x.ToString())
ignore <| |fun x ->|(5) (x.ToString())
ignore <| |fun x ->|(6) x.Prop[0]
ignore <| |fun x ->|(7) x.Prop.[0]
[1] |> (|fun x ->|(8) x.ToString(|fun x ->|(9) x.ToString())) |> ignore
[1] |> (|fun x ->|(10) x.Equals(let x = 5 in x)) |> ignore
type A1 = member _.M() = |fun x ->|(11) x.ToString()
let f (a, (b, c)) = fun x -> |fun x ->|(12) x.ToString()
match 1 with _ -> |fun x ->|(13) x.ToString()
let _ = let _ = 3 in |fun x ->|(14) x.ToString()

type A = static member M(x: int -> string) = ()
A.M(|fun x ->|(15) x.ToString())

// Not available
ignore <| fun x -> x.Equals(x)
ignore <| fun x -> x.ToString ()
ignore <| fun x -> y.ToString()
ignore <| fun x -> (x.ToString)()
[1] |> (fun x -> x[0]) |> ignore
[1] |> (fun x -> x.[0]) |> ignore
ignore <| fun x -> x.ToString()[0]
ignore <| fun (x, y) -> x.ToString()
ignore <| <@ fun x -> x.ToString() @>
ignore <| <@@ fun x -> x.ToString() @@>
ignore <| <@ fun x -> fun y -> y.ToString() @>
[1] |> (fun x -> x.Select(_.ToString())) |> ignore 
[1] |> _.Select(fun x -> x.ToString()) |> ignore
(fun _ -> fun x -> x.ToString()) |> ignore
(fun _ -> fun y -> fun x -> x.ToString()) |> ignore
(fun (a, (b, _)) -> fun y -> fun x -> x.ToString()) |> ignore
type A2 = member _.M _ = fun x -> x.ToString()
let g (a, (b, Some _)) = fun x -> fun x -> x.ToString()

open System
open System.Linq.Expressions
type A with static member M(x: int, y: Func<int, string>) = ()
type A with static member M(x: string, y: Expression<Func<int, string>>) = ()
A.M(1, fun x -> x.ToString())
A.M("", fun x -> x.ToString())

---------------------------------------------------------
(0): ReSharper Dead Code: Shorthand lambda can be used
(1): ReSharper Dead Code: Shorthand lambda can be used
(2): ReSharper Dead Code: Shorthand lambda can be used
(3): ReSharper Dead Code: Shorthand lambda can be used
(4): ReSharper Dead Code: Shorthand lambda can be used
(5): ReSharper Dead Code: Shorthand lambda can be used
(6): ReSharper Dead Code: Shorthand lambda can be used
(7): ReSharper Dead Code: Shorthand lambda can be used
(8): ReSharper Dead Code: Shorthand lambda can be used
(9): ReSharper Dead Code: Shorthand lambda can be used
(10): ReSharper Dead Code: Shorthand lambda can be used
(11): ReSharper Dead Code: Shorthand lambda can be used
(12): ReSharper Dead Code: Shorthand lambda can be used
(13): ReSharper Dead Code: Shorthand lambda can be used
(14): ReSharper Dead Code: Shorthand lambda can be used
(15): ReSharper Dead Code: Shorthand lambda can be used
