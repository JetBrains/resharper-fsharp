open System
open System.Linq
open System.Linq.Expressions

// Available
ignore <| |fun x ->|(0) x.ToString()
ignore <| |fun x ->|(1) x   .    ToString()
ignore <| |fun x ->|(2) (x).ToString()
ignore <| |fun (x) ->|(3) x.ToString()
ignore <| |fun x ->|(4) (x.ToString())
ignore <| |fun x ->|(5) (x.ToString())
ignore <| |fun x ->|(6) x.Prop[0]
ignore <| |fun x ->|(7) x.Prop.[0]
ignore <| <@ fun x -> |fun y ->|(8) y.ToString() @>
[1] |> (|fun x ->|(9) x.ToString(|fun x ->|(10) x.ToString())) |> ignore
[1] |> (|fun x ->|(11) x.Equals(let x = 5 in x)) |> ignore
type A1 = member _.M() = |fun x ->|(12) x.ToString()
let f (a, (b, c)) = fun x -> |fun x ->|(13) x.ToString()
match 1 with _ -> |fun x ->|(14) x.ToString()
let _ = let _ = 3 in |fun x ->|(15) x.ToString()

type A = static member M(x: int -> string) = ()
A.M(|fun x ->|(16) x.ToString())

ignore <| <@ |fun x ->|(17) x.ToString() @>
ignore <| <@@ |fun x ->|(18) x.ToString() @@>
[1] |> (|fun x ->|(19) x.Select(_.ToString())) |> ignore 
[1] |> _.Select(|fun x ->|(20) x.ToString()) |> ignore
(fun _ -> |fun x ->|(21) x.ToString()) |> ignore
(fun _ -> fun y -> |fun x ->|(22) x.ToString()) |> ignore
(fun (a, (b, _)) -> fun y -> |fun x ->|(23) x.ToString()) |> ignore
type A2 = member _.M _ = |fun x ->|(24) x.ToString()
let g (a, (b, Some _)) = fun x -> |fun x ->|(25) x.ToString()

type A with static member M(x: int, y: Func<int, string>) = ()
type A with static member M(x: string, y: Expression<Func<int, string>>) = ()
A.M(1, |fun x ->|(26) x.ToString())
A.M("", |fun x ->|(27) x.ToString())


// Not available
ignore <| fun x -> x.Equals(x)
ignore <| fun x -> x.ToString ()
ignore <| fun x -> y.ToString()
ignore <| fun x -> (x.ToString)()
[1] |> (fun x -> x[0]) |> ignore
[1] |> (fun x -> x.[0]) |> ignore
ignore <| fun x -> x.ToString()[0]
ignore <| fun (x, y) -> x.ToString()

---------------------------------------------------------
(0): ReSharper Dead Code: Shorthand lambda can be used
(1): ReSharper Dead Code: Shorthand lambda can be used
(2): ReSharper Dead Code: Shorthand lambda can be used
(3): ReSharper Dead Code: Shorthand lambda can be used
(4): ReSharper Dead Code: Shorthand lambda can be used
(5): ReSharper Dead Code: Shorthand lambda can be used
(6): ReSharper Dead Code: Shorthand lambda can be used
(7): ReSharper Dead Code: Shorthand lambda can be used
(8): ReSharper Dead Code: Shorthand lambda can be used
(9): ReSharper Dead Code: Shorthand lambda can be used
(10): ReSharper Dead Code: Shorthand lambda can be used
(11): ReSharper Dead Code: Shorthand lambda can be used
(12): ReSharper Dead Code: Shorthand lambda can be used
(13): ReSharper Dead Code: Shorthand lambda can be used
(14): ReSharper Dead Code: Shorthand lambda can be used
(15): ReSharper Dead Code: Shorthand lambda can be used
(16): ReSharper Dead Code: Shorthand lambda can be used
(17): ReSharper Dead Code: Shorthand lambda can be used
(18): ReSharper Dead Code: Shorthand lambda can be used
(19): ReSharper Dead Code: Shorthand lambda can be used
(20): ReSharper Dead Code: Shorthand lambda can be used
(21): ReSharper Dead Code: Shorthand lambda can be used
(22): ReSharper Dead Code: Shorthand lambda can be used
(23): ReSharper Dead Code: Shorthand lambda can be used
(24): ReSharper Dead Code: Shorthand lambda can be used
(25): ReSharper Dead Code: Shorthand lambda can be used
(26): ReSharper Dead Code: Shorthand lambda can be used
(27): ReSharper Dead Code: Shorthand lambda can be used
