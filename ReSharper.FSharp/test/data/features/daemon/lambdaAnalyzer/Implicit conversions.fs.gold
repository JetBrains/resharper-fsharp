module Test

type I =
    interface
    end

type T(x) =
    interface I
    static member F(x) = T(x)
    static member F1(x) = T(x) :> I
    static member Id(x) = x

let f x = T(x)
let g x : I = T(x)

let _: _ -> I = fun x -> f x
let _: _ -> I = |fun x -> g x|(0)
let _: _ -> I = |fun x -> |id|(2) x|(1)
let _: _ -> I = fun x -> T x
let _: _ -> I = fun x -> T.F(x)
let _: _ -> I = |fun x -> T.F1(x)|(3)
let _: _ -> I = |fun x -> T.Id(x)|(4)
let _: I[] = [||] |> Array.map (fun x -> T(x))
let _: T[] = [||] |> Array.map (|fun x -> T(x)|(5))
let _ = if true then (id: _ -> I) else fun x -> T(x)
let _ = if true then (id: _ -> I) else |fun x -> T.Id(x)|(6)

let h x y : I = T(x)

let _: _ -> _ -> I = |fun x y -> h x y|(7)


let _: int -> float = fun x -> x
let _: string = |fun x -> x|(8)


let f1 x y = 5
let _: int -> FSharpFunc<int, int> = |fun x -> f1 x|(9)
let _: int -> 'a = |fun x -> f1 1 x|(10)

---------------------------------------------------------
(0): ReSharper Hint: Lambda can be replaced with 'g'
(1): ReSharper Hint: Lambda can be replaced with 'id'
(2): ReSharper Dead Code: Redundant application
(3): ReSharper Hint: Lambda can be replaced with 'T.F1'
(4): ReSharper Hint: Lambda can be replaced with 'T.Id'
(5): ReSharper Hint: Lambda can be replaced with 'T'
(6): ReSharper Hint: Lambda can be replaced with 'T.Id'
(7): ReSharper Hint: Lambda can be replaced with 'h'
(8): ReSharper Hint: Lambda can be replaced with 'id'
(9): ReSharper Hint: Lambda can be replaced with 'f1'
(10): ReSharper Hint: Lambda can be simplified
